type Certificate {
	id: ID!
	text: String
	resume: String!
}

type CertificateConnection {
	items: [Certificate]
	nextToken: String
}

type Course {
	id: ID!
	text: String!
	resume: String!
	establishment: String
}

type CourseConnection {
	items: [Course]
	nextToken: String
}

input CreateCertificateInput {
	text: String
	resume: String!
}

input CreateCourseInput {
	text: String!
	establishment: String!
	resume: String!
}

input CreateDutyInput {
	text: String!
	resume: String!
	company: String!
	skills: [CreateSkillInput]
}

input CreateEducationInput {
	text: String!
	resume: String!
	courses: [CreateCourseInput]
	sortOrder: Int!
}

input CreateExperienceInput {
	role: String!
	company: String!
	resume: String!
	duties: [CreateDutyInput]
	sortOrder: Int
	period: String
}

input CreateInterestInput {
	text: String
	resume: String!
}

input CreateLanguageInput {
	id: ID
	text: String!
	resume: String!
	proficiency: Int!
}

input CreateOtherExperienceInput {
	company: String!
	resume: String!
}

input CreatePersonalDetailsInput {
	location: String!
	website: String!
	email: String!
	resume: String!
}

input CreateResumeInput {
	name: String
}

input CreateSkillInput {
	text: String!
	proficiency: Int
	resume: String!
	sortOrder: Int
}

input CreateSummaryInput {
	text: String!
	resume: String!
}

input CreateTitleInput {
	name: String!
	role: String!
	resume: String!
}

input DeleteCertificateInput {
	id: ID!
}

input DeleteCourseInput {
	id: ID!
}

input DeleteDutyInput {
	id: ID!
}

input DeleteEducationInput {
	establishment: String!
}

input DeleteExperienceInput {
	id: ID!
}

input DeleteInterestInput {
	id: ID!
}

input DeleteLanguageInput {
	id: ID!
	proficiency: Int!
}

input DeleteOtherExperienceInput {
	id: ID!
}

input DeletePersonalDetailsInput {
	id: ID!
}

input DeleteResumeInput {
	id: ID!
}

input DeleteSkillInput {
	id: ID!
}

input DeleteSummaryInput {
	id: ID!
}

input DeleteTitleInput {
	id: ID!
}

type Duty {
	id: ID!
	text: String!
	skills: [Skill]
	resume: String!
	company: String!
}

type DutyConnection {
	items: [Duty]
	nextToken: String
}

type Education {
	id: ID!
	text: String!
	courses: [Course]
	resume: String!
}

type EducationConnection {
	items: [Education]
	nextToken: String
}

type Experience {
	id: ID!
	role: String!
	company: String!
	duties: [Duty]
	resume: String!
	sortOrder: Int
	period: String
}

type ExperienceConnection {
	items: [Experience]
	nextToken: String
}

type Interest {
	id: ID!
	text: String
	resume: String!
}

type InterestConnection {
	items: [Interest]
	nextToken: String
}

type Language {
	id: ID!
	text: String!
	resume: String!
	proficiency: Int!
}

type LanguageConnection {
	items: [Language]
	nextToken: String
}

type Mutation {
	createCertificate(input: CreateCertificateInput!): Certificate
	updateCertificate(input: UpdateCertificateInput!): Certificate
	deleteCertificate(input: DeleteCertificateInput!): Certificate
	createCourse(input: CreateCourseInput!): Course
	updateCourse(input: UpdateCourseInput!): Course
	deleteCourse(input: DeleteCourseInput!): Course
	createDuty(input: CreateDutyInput!): Duty
	updateDuty(input: UpdateDutyInput!): Duty
	deleteDuty(input: DeleteDutyInput!): Duty
	createEducation(input: CreateEducationInput!): Education
	updateEducation(input: UpdateEducationInput!): Education
	deleteEducation(input: DeleteEducationInput!): Education
	createExperience(input: CreateExperienceInput!): Experience
	updateExperience(input: UpdateExperienceInput!): Experience
	deleteExperience(input: DeleteExperienceInput!): Experience
	createInterest(input: CreateInterestInput!): Interest
	updateInterest(input: UpdateInterestInput!): Interest
	deleteInterest(input: DeleteInterestInput!): Interest
	createOtherExperience(input: CreateOtherExperienceInput!): OtherExperience
	updateOtherExperience(input: UpdateOtherExperienceInput!): OtherExperience
	deleteOtherExperience(input: DeleteOtherExperienceInput!): OtherExperience
	createPersonalDetails(input: CreatePersonalDetailsInput!): PersonalDetails
	updatePersonalDetails(input: UpdatePersonalDetailsInput!): PersonalDetails
	deletePersonalDetails(input: DeletePersonalDetailsInput!): PersonalDetails
	createResume(input: CreateResumeInput!): Resume
	updateResume(input: UpdateResumeInput!): Resume
	deleteResume(input: DeleteResumeInput!): Resume
	createSkill(input: CreateSkillInput!): Skill
	updateSkill(input: UpdateSkillInput!): Skill
	deleteSkill(input: DeleteSkillInput!): Skill
	createSummary(input: CreateSummaryInput!): Summary
	updateSummary(input: UpdateSummaryInput!): Summary
	deleteSummary(input: DeleteSummaryInput!): Summary
	createTitle(input: CreateTitleInput!): Title
	updateTitle(input: UpdateTitleInput!): Title
	deleteTitle(input: DeleteTitleInput!): Title
	createLanguage(input: CreateLanguageInput!): Language
	updateLanguage(input: UpdateLanguageInput!): Language
	deleteLanguage(input: DeleteLanguageInput!): Language
}

type OtherExperience {
	id: ID!
	company: String!
	duties: [Duty]
	resume: String!
}

type OtherExperienceConnection {
	items: [OtherExperience]
	nextToken: String
}

type PersonalDetails {
	id: ID!
	location: String!
	website: String!
	email: String!
	resume: String!
}

type PersonalDetailsConnection {
	items: [PersonalDetails]
	nextToken: String
}

type Query {
	getCertificate(id: ID!): Certificate
	listCertificates(filter: TableCertificateFilterInput, limit: Int, nextToken: String): CertificateConnection
	getCourse(id: ID!): Course
	listCourses(filter: TableCourseFilterInput, limit: Int, nextToken: String): CourseConnection
	getDuty(id: ID!): Duty
	listDuties(filter: TableDutyFilterInput, limit: Int, nextToken: String): DutyConnection
	getEducation(establishment: String!): Education
	listEducations(filter: TableEducationFilterInput, limit: Int, nextToken: String): EducationConnection
	getExperience(id: ID!): Experience
	listExperiences(filter: TableExperienceFilterInput, limit: Int, nextToken: String): ExperienceConnection
	getInterest(id: ID!): Interest
	listInterests(filter: TableInterestFilterInput, limit: Int, nextToken: String): InterestConnection
	getOtherExperience(id: ID!): OtherExperience
	listOtherExperiences(filter: TableOtherExperienceFilterInput, limit: Int, nextToken: String): OtherExperienceConnection
	getPersonalDetails(id: ID!): PersonalDetails
	listPersonalDetails(filter: TablePersonalDetailsFilterInput, limit: Int, nextToken: String): PersonalDetailsConnection
	getResume(id: ID!): Resume
	listResumes(filter: TableResumeFilterInput, limit: Int, nextToken: String): ResumeConnection
	getSkill(id: ID!): Skill
	listSkills(filter: TableSkillFilterInput, limit: Int, nextToken: String): SkillConnection
	getSummary(id: ID!): Summary
	listSummaries(filter: TableSummaryFilterInput, limit: Int, nextToken: String): SummaryConnection
	getTitle(id: ID!): Title
	listTitles(filter: TableTitleFilterInput, limit: Int, nextToken: String): TitleConnection
	getLanguage(id: ID!, proficiency: Int!): Language
	listLanguages(filter: TableLanguageFilterInput, limit: Int, nextToken: String): LanguageConnection
}

type Resume {
	id: ID!
	name: String
	timestamp: AWSDate
	title: Title
	summary: Summary
	experience: [Experience]
	otherExperience: Experience
	education: [Education]
	certificates: [Certificate]
	interests: [Interest]
	personalDetails: [PersonalDetails]
	skills: [Skill]
}

type ResumeConnection {
	items: [Resume]
	nextToken: String
}

type Skill {
	id: ID!
	text: String!
	proficiency: Int
	resume: String!
	sortOrder: Int!
}

type SkillConnection {
	items: [Skill]
	nextToken: String
}

type Subscription {
	onCreateCertificate(id: ID, text: String): Certificate
		@aws_subscribe(mutations: ["createCertificate"])
	onUpdateCertificate(id: ID, text: String): Certificate
		@aws_subscribe(mutations: ["updateCertificate"])
	onDeleteCertificate(id: ID, text: String): Certificate
		@aws_subscribe(mutations: ["deleteCertificate"])
	onCreateCourse(id: ID, text: String): Course
		@aws_subscribe(mutations: ["createCourse"])
	onUpdateCourse(id: ID, text: String): Course
		@aws_subscribe(mutations: ["updateCourse"])
	onDeleteCourse(id: ID, text: String): Course
		@aws_subscribe(mutations: ["deleteCourse"])
	onCreateDuty(id: ID, text: String): Duty
		@aws_subscribe(mutations: ["createDuty"])
	onUpdateDuty(id: ID, text: String): Duty
		@aws_subscribe(mutations: ["updateDuty"])
	onDeleteDuty(id: ID, text: String): Duty
		@aws_subscribe(mutations: ["deleteDuty"])
	onCreateEducation(establishment: String): Education
		@aws_subscribe(mutations: ["createEducation"])
	onUpdateEducation(establishment: String): Education
		@aws_subscribe(mutations: ["updateEducation"])
	onDeleteEducation(establishment: String): Education
		@aws_subscribe(mutations: ["deleteEducation"])
	onCreateExperience(id: ID, role: String, company: String): Experience
		@aws_subscribe(mutations: ["createExperience"])
	onUpdateExperience(id: ID, role: String, company: String): Experience
		@aws_subscribe(mutations: ["updateExperience"])
	onDeleteExperience(id: ID, role: String, company: String): Experience
		@aws_subscribe(mutations: ["deleteExperience"])
	onCreateInterest(id: ID, text: String): Interest
		@aws_subscribe(mutations: ["createInterest"])
	onUpdateInterest(id: ID, text: String): Interest
		@aws_subscribe(mutations: ["updateInterest"])
	onDeleteInterest(id: ID, text: String): Interest
		@aws_subscribe(mutations: ["deleteInterest"])
	onCreateOtherExperience(id: ID, company: String): OtherExperience
		@aws_subscribe(mutations: ["createOtherExperience"])
	onUpdateOtherExperience(id: ID, company: String): OtherExperience
		@aws_subscribe(mutations: ["updateOtherExperience"])
	onDeleteOtherExperience(id: ID, company: String): OtherExperience
		@aws_subscribe(mutations: ["deleteOtherExperience"])
	onCreatePersonalDetails(
		id: ID,
		location: String,
		website: String,
		email: String
	): PersonalDetails
		@aws_subscribe(mutations: ["createPersonalDetails"])
	onUpdatePersonalDetails(
		id: ID,
		location: String,
		website: String,
		email: String
	): PersonalDetails
		@aws_subscribe(mutations: ["updatePersonalDetails"])
	onDeletePersonalDetails(
		id: ID,
		location: String,
		website: String,
		email: String
	): PersonalDetails
		@aws_subscribe(mutations: ["deletePersonalDetails"])
	onCreateResume(id: ID, name: String): Resume
		@aws_subscribe(mutations: ["createResume"])
	onUpdateResume(id: ID, name: String): Resume
		@aws_subscribe(mutations: ["updateResume"])
	onDeleteResume(id: ID, name: String): Resume
		@aws_subscribe(mutations: ["deleteResume"])
	onCreateSkill(id: ID, text: String, proficiency: Int): Skill
		@aws_subscribe(mutations: ["createSkill"])
	onUpdateSkill(id: ID, text: String, proficiency: Int): Skill
		@aws_subscribe(mutations: ["updateSkill"])
	onDeleteSkill(id: ID, text: String, proficiency: Int): Skill
		@aws_subscribe(mutations: ["deleteSkill"])
	onCreateSummary(id: ID, text: String): Summary
		@aws_subscribe(mutations: ["createSummary"])
	onUpdateSummary(id: ID, text: String): Summary
		@aws_subscribe(mutations: ["updateSummary"])
	onDeleteSummary(id: ID, text: String): Summary
		@aws_subscribe(mutations: ["deleteSummary"])
	onCreateTitle(id: ID, name: String, role: String): Title
		@aws_subscribe(mutations: ["createTitle"])
	onUpdateTitle(id: ID, name: String, role: String): Title
		@aws_subscribe(mutations: ["updateTitle"])
	onDeleteTitle(id: ID, name: String, role: String): Title
		@aws_subscribe(mutations: ["deleteTitle"])
	onCreateLanguage(
		id: ID,
		text: String,
		resume: String,
		proficiency: Int
	): Language
		@aws_subscribe(mutations: ["createLanguage"])
	onUpdateLanguage(
		id: ID,
		text: String,
		resume: String,
		proficiency: Int
	): Language
		@aws_subscribe(mutations: ["updateLanguage"])
	onDeleteLanguage(
		id: ID,
		text: String,
		resume: String,
		proficiency: Int
	): Language
		@aws_subscribe(mutations: ["deleteLanguage"])
}

type Summary {
	id: ID!
	text: String!
	resume: String!
}

type SummaryConnection {
	items: [Summary]
	nextToken: String
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableCertificateFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	resume: TableStringFilterInput
}

input TableCourseFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	establishment: TableStringFilterInput
}

input TableDutyFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	company: TableStringFilterInput
}

input TableEducationFilterInput {
	establishment: TableStringFilterInput
	resume: TableStringFilterInput
}

input TableExperienceFilterInput {
	id: TableIDFilterInput
	role: TableStringFilterInput
	company: TableStringFilterInput
	resume: TableStringFilterInput
	sortOrder: TableIntFilterInput
	period: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableInterestFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	resume: TableStringFilterInput
}

input TableLanguageFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	resume: TableStringFilterInput
	proficiency: TableIntFilterInput
}

input TableOtherExperienceFilterInput {
	id: TableIDFilterInput
	company: TableStringFilterInput
	resume: TableStringFilterInput
}

input TablePersonalDetailsFilterInput {
	id: TableIDFilterInput
	location: TableStringFilterInput
	website: TableStringFilterInput
	email: TableStringFilterInput
	resume: TableStringFilterInput
}

input TableResumeFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
}

input TableSkillFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	proficiency: TableIntFilterInput
	resume: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input TableSummaryFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	resume: TableStringFilterInput
}

input TableTitleFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	role: TableStringFilterInput
	resume: TableStringFilterInput
}

type Title {
	id: ID!
	name: String!
	role: String!
	resume: String!
}

type TitleConnection {
	items: [Title]
	nextToken: String
}

input UpdateCertificateInput {
	id: ID!
	text: String
}

input UpdateCourseInput {
	id: ID!
	text: String
}

input UpdateDutyInput {
	id: ID!
	text: String
}

input UpdateEducationInput {
	establishment: String!
}

input UpdateExperienceInput {
	id: ID!
	role: String
	company: String
}

input UpdateInterestInput {
	id: ID!
	text: String
}

input UpdateLanguageInput {
	id: ID!
	text: String
	resume: String
	proficiency: Int!
}

input UpdateOtherExperienceInput {
	id: ID!
	company: String
}

input UpdatePersonalDetailsInput {
	id: ID!
	location: String
	website: String
	email: String
}

input UpdateResumeInput {
	id: ID!
	name: String
}

input UpdateSkillInput {
	id: ID!
	text: String
	proficiency: Int
}

input UpdateSummaryInput {
	id: ID!
	text: String
}

input UpdateTitleInput {
	id: ID!
	name: String
	role: String
}